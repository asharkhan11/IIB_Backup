







CREATE COMPUTE MODULE crud_Exception_Handling
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage()
	BEGIN
		------------handling exceptions here------------

		DECLARE exRef REFERENCE TO InputExceptionList;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC;

--		CALL fetchException(exRef);
		CALL BuildExceptionDetails(outRef);

	END;


	CREATE PROCEDURE fetchException (IN exRef REFERENCE)
	BEGIN		



--		SET OutputRoot.XMLNSC = InputExceptionList;
--		DECLARE data BLOB;
--		SET data = ASBITSTREAM(InputExceptionList);
--
--		DECLARE d CHARACTER CAST(data AS CHARACTER CCSID 1208 ENCODING 546);
--
--		DECLARE exData CHARACTER CAST( ASBITSTREAM(InputExceptionList.[1]) AS CHARACTER CCSID 1208 ENCODING 546);
--
--		IF CONTAINS(exData, 'DatabaseException') THEN
--			DECLARE start INTEGER POSITION('DatabaseException' IN exData);
--
--			SET exData = SUBSTRING(exData FROM start);
--
--			CREATE LASTCHILD OF OutputRoot.XMLNSC PARSE(exData ENCODING 546 CCSID 1208) ;
--		END IF;
--
--		CALL write_log(MessageFlowLabel,'dco_info','ERROR','Error from database \\n details : ' || exData) INTO var;
--		SET OutputRoot.XMLNSC.error = exData;

	END;


END MODULE;

CREATE PROCEDURE BuildExceptionDetails(IN outRef REFERENCE)
BEGIN		


	DECLARE EXIT HANDLER FOR SQLSTATE LIKE'%'
	BEGIN
		
		SET outRef.error.mySQLCODE = SQLCODE;
		SET outRef.error.mySQLSTATE = SQLSTATE;
		SET outRef.error.mySQLNATIVEERROR = SQLNATIVEERROR;
		SET outRef.error.mySQLERRORTEXT = SQLERRORTEXT;
	END;

END;
BROKER SCHEMA com.hdfc.rtgs.out.exception
PATH com.cedge.hdfc.rtgs.out;
   
CREATE COMPUTE MODULE HDFC_RTGS_EXCEPTION_HANDLING
	DECLARE DSN EXTERNAL CHARACTER;
	DECLARE PROP_LOC EXTERNAL CHARACTER;
	DECLARE Log4jConfighFilePath EXTERNAL CHARACTER '';
	DECLARE nodepath CHARACTER InputExceptionList.RecoverableException.Label;
    CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rc BOOLEAN;
-- 		CALL initLog4j('/var/iib/interface/hdfc/neft/inward/properties/log4j/hdfc_neft_rgts_log4j.xml') INTO rc;
		CALL initLog4j(Log4jConfighFilePath) INTO rc;
		CALL log4j_1_1('Exception_Handling_Subflow', 'HDFC_RTGS_OUT_EXEC', 'WARN','---------------START---------------') INTO rc;
		DECLARE TIMESTAMP_FORMAT CHARACTER 'yyyy-MM-dd''T''HH:mm:ss.SSSSSS';
		DECLARE ccsid INTEGER 1208;
		CALL getFlowDetails(InputRoot);
		SET Environment.Variables.TraceFileExc.ExceptionDate=CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT TIMESTAMP_FORMAT);
		CALL originalMsg(ccsid, InputRoot);
		DECLARE excDesc CHARACTER getExceptionDesc(InputRoot, OutputRoot, InputExceptionList);
		CALL storeException(Environment.excDesc);
		
		DECLARE exceptiondata CHARACTER Environment.excDesc;
		SET Environment.excDesc = excDesc;
		
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Flow terminated with below exception.') INTO rc;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN',excDesc) INTO rc;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Sending an Email') INTO rc;
		CALL setMailInfo();
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE originalMsg (IN ccsid INTEGER, IN InputRoot REFERENCE)
	BEGIN
		--If error occurs capture the original message
		DECLARE domainFldName CHARACTER FIELDNAME(InputBody);
		IF domainFldName='MRM' THEN
			SET Environment.Variables.TraceFileExc.originalMessage=InputRoot.MRM;
		ELSEIF domainFldName='XMLNSC' THEN
			SET Environment.Variables.TraceFileExc.originalMessage=CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID ccsid) AS CHARACTER CCSID ccsid);
		ELSEIF domainFldName='SOAP' THEN
			SET Environment.Variables.TraceFileExc.originalMessage=CAST(ASBITSTREAM(InputRoot.SOAP CCSID ccsid) AS CHARACTER CCSID ccsid);
		ELSEIF domainFldName='BLOB' THEN
			SET Environment.Variables.TraceFileExc.originalMessage=CAST(ASBITSTREAM(InputRoot.BLOB CCSID ccsid) AS CHARACTER CCSID ccsid);
		ELSEIF domainFldName='DFDL' THEN
			SET Environment.Variables.TraceFileExc.originalMessage=CAST(ASBITSTREAM(InputRoot.DFDL CCSID ccsid) AS CHARACTER CCSID ccsid);
		END IF;
	END;

	CREATE PROCEDURE getFlowDetails(IN InputRoot REFERENCE)
	BEGIN
		--Taking messge flow details
		--Taking message flow name , node name
		DECLARE rc BOOLEAN ;
		DECLARE nodeName CHARACTER;
		DECLARE label CHARACTER;
		DECLARE flowName, flowNameone,flowNametwo CHARACTER;
		DECLARE fieldPosition INTEGER;
		DECLARE excListRef REFERENCE TO InputExceptionList.*[1];
		SET label = excListRef.Label;
		SET flowNameone = excListRef.Name;
		SET fieldPosition = POSITION('.' IN label);
		SET flowNametwo=SUBSTRING(flowNameone AFTER '.');
		IF flowNametwo='' THEN
			SET flowName=SUBSTRING(flowNameone BEFORE '#');
		ELSE
			SET flowName=SUBSTRING(flowNametwo BEFORE '#');
		END IF;
		SET nodeName=SUBSTRING(label FROM (fieldPosition+1));
		SET Environment.Variables.TraceFileExc.FlowName=flowName;
		SET Environment.Variables.TraceFileExc.NodeName=nodeName;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Flow Name :'||flowName) INTO rc;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Node Name :'||nodeName) INTO rc;
	END;
	
	CREATE PROCEDURE getExceptionDesc (IN InputRoot REFERENCE, IN OutputRoot REFERENCE, IN InputExceptionList REFERENCE)
    RETURNS CHAR
    BEGIN
	--Copy the exception description
	DECLARE rc BOOLEAN;
	DECLARE continueLoop BOOLEAN;
	DECLARE inRef REFERENCE TO InputRoot;
	DECLARE outRef REFERENCE TO OutputRoot;
	DECLARE inRefName,inRefValue CHARACTER;
	DECLARE exceptionData CHAR;
	SET continueLoop = TRUE;
	MOVE inRef TO InputExceptionList;
	WHILE continueLoop DO
		IF CARDINALITY(inRef.RecoverableException[]) = 0 THEN
			SET continueLoop = FALSE;
		ELSE
			MOVE inRef TO inRef.RecoverableException[1];
		END IF;
	END WHILE;
	--
	DECLARE messageText CHARACTER;
    DECLARE inRef2 REFERENCE TO InputExceptionList;
    DECLARE insertRef REFERENCE TO InputExceptionList;
    WHILE lastmove(inRef2) DO
    IF inRef2.Number is not null THEN
          SET messageText  =  inRef2.Text;
          MOVE insertRef TO inRef2.Insert[>];
          WHILE LASTMOVE(insertRef) DO    --- fetch description from Insert[] 
           SET messageText = messageText ||'  '||insertRef.Text;
              MOVE insertRef NEXTSIBLING;
          END WHILE;
    END IF;
   move inRef2 lastchild;
   END WHILE;
   
	CREATE LASTCHILD OF OutputRoot AS outRef DOMAIN 'XMLNS';
	CREATE LASTCHILD OF OutputRoot.XMLNS AS outRef NAME 'ExceptionText';
	
	
	IF (LENGTH(inRef.[<].Text)=0) THEN
		SET inRefName= FIELDNAME(inRef);
		SET inRefValue= FIELDVALUE(inRef.Text);
		SET outRef.ExceptionText = FIELDNAME(inRef)||'  :'||'  '||FIELDVALUE(inRef.Text);
	ELSE
		SET inRefName= FIELDNAME(inRef);
		SET inRefValue= FIELDVALUE(inRef.Text);
		SET outRef.ExceptionText = FIELDNAME(inRef.[<])||'  :'||'  '||FIELDVALUE(inRef.[<].Text);
	END IF;
	SET exceptionData=inRefName||'  '||inRefValue||'  '||messageText;
	SET OutputRoot.XMLNS = NULL;
	CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Exception Description :  '||exceptionData) INTO rc;
	RETURN exceptionData;
  END;

   CREATE PROCEDURE storeException (IN exc CHARACTER )
	BEGIN
		--change this according to new 
		DECLARE rc BOOLEAN ;
		DECLARE msgId CHARACTER InputRoot.MQMD.MsgId;
		SET msgId = SUBSTRING(msgId FROM 3 FOR 48);
		DECLARE check ROW;
	--	DECLARE TXNNUM CHARACTER;
		DECLARE txnNum CHARACTER InputRoot.DFDL.*.Body.TRANSACTIONREFERENCENUMBER;
		DECLARE datechar CHARACTER CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMdd');
		SET txnNum = datechar||txnNum;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Transaction Reference Number :'||txnNum) INTO rc;
		SET check.R[] = PASSTHRU('SELECT RETRY_COUNT FROM RTGS_OUT_PAYLOAD WHERE TXN_REF_NUM = ?' TO Database.{DSN} VALUES(txnNum));
		IF check.R[1].RETRY_COUNT >= 0 THEN
			UPDATE Database.RTGS_OUT_PAYLOAD as T
			SET
			RETRY_COUNT = check.R[1].RETRY_COUNT+1,
			LAST_MOD_TIME = CURRENT_TIMESTAMP,
			EXCEPTION_DESCRIPTION = exc
			WHERE
			T.TXN_REF_NUM = txnNum;
			CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Retry Count is Updated successfully with Transaction Reference Number :'||txnNum) INTO rc;
		ELSE
			DECLARE wholeMsgBlob BLOB ASBITSTREAM(InputRoot.DFDL, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId );
	 		DECLARE wholeMsgChar CHAR CAST(wholeMsgBlob AS CHAR CCSID InputRoot.Properties.CodedCharSetId);
	 		DECLARE fileName CHARACTER 'filename';
	 		SET fileName = Environment.filename;
	 		INSERT INTO Database.RTGS_OUT_PAYLOAD (MSGID,PAYLOAD,CREATION_TIME,LAST_MOD_TIME,STATUS,RETRY_COUNT,FILE_NAME,EXCEPTION_DESCRIPTION,TXN_REF_NUM ) 
	 		VALUES (msgId,wholeMsgChar, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,'F', '1',fileName,exc,txnNum);			
		END IF;
		
		
	END;
    CREATE PROCEDURE setMailInfo ( )
	BEGIN
		DECLARE rc BOOLEAN ;
		DECLARE toEmail,ccEmail,fromEmail,smtpServer CHARACTER '';
		DECLARE CR CHARACTER CAST(CAST('X''0A''' AS BLOB) AS CHARACTER CCSID 1208);
		CALL getMailProp(PROP_LOC,toEmail,ccEmail,fromEmail,smtpServer);
	
		SET Environment.toEmail = toEmail;
		SET Environment.ccEmail = ccEmail;
		SET Environment.fromEmail = fromEmail;
		SET Environment.mailSubject = 'Warning Regarding YES RTGS OUTWARD'; 
		SET Environment.smtpServer = smtpServer;
		DECLARE transRefNo CHARACTER InputRoot.DFDL.*.Body.TRANSACTIONREFERENCENUMBER;
		
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Email Configuration Details ') INTO rc;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','TO Mail :'||toEmail) INTO rc;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','CC Mail :'||ccEmail) INTO rc;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','From Mail :'||fromEmail) INTO rc;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Smtp Server :'||smtpServer) INTO rc;
		
	
		IF LENGTH(transRefNo) <> 0 THEN						
			SET Environment.mailBody = 'Dear Team,'||CR||'Message with transaction ID :'||transRefNo||','||CR||CR||' processing failed because of this exception:'||Environment.excDesc;	
		ELSE
			SET Environment.mailBody = 'Dear Team,'||CR||'UTR No is blank , '||CR||CR||'processing failed because of this exception:'||Environment.excDesc;	
		END IF;
		
	    CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','Mail Body Description :  '||Environment.mailBody) INTO rc;
		CALL log4j_1_1(nodepath, 'HDFC_RTGS_OUT_EXEC', 'WARN','----------------END----------------') INTO rc;
	END;
	CREATE FUNCTION getMailProp( IN P1 CHARACTER, OUT P2 CHARACTER,OUT P3 CHARACTER, OUT P4 CHARACTER,OUT P5 CHARACTER)
	LANGUAGE JAVA 
 	EXTERNAL NAME "com.cedge.hdfc.rtgs.out.HDFC_RTGS_OUTWARD_JavaCompute.getMailProp";
 END MODULE;

